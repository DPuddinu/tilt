---
import GoalRow from '@/pages/goals/_components/GoalRow.astro';
import { formatDate } from '@/utils/format-date';
import { Icon } from 'astro-icon/components';
import type { TActivity, TGoal } from 'db/config';
import Card from './Card.astro';

type Props = {
  activities: TActivity[];
  goals: TGoal[];
  totalRows: number;
  totalPages: number;
  offset: number;
  currentPage: number;
  itemsPerPage: number;
  queryParams?: Record<string, string | null> | undefined;
};
const { activities, goals, totalPages, offset, currentPage, itemsPerPage, queryParams = undefined } = Astro.props;
const paramsArray = Object.entries(queryParams ?? {}).filter(([key, value]) => Boolean(value));
const locale = Astro.request.headers.get('Accept-Language')?.substring(0, 5);
const path = Astro.url.pathname;
const baseHref = path.includes('activities') ? '' : '/activities/';
---

<Card title='Goals'>
  <div slot='header-content' class='flex w-full items-center justify-end'>
    <a
      transition:animate='slide'
      href='/goals/new'
      data-astro-prefetch
      class='btn btn-circle btn-warning btn-sm text-base font-extrabold md:btn-md md:text-2xl md:font-bold'
      transition:name='fab'>
      +
    </a>
  </div>
  {
    goals.length > 0 ? (
      <>
        <article class='hidden grow md:flex'>
          <div class='grow overflow-x-auto'>
            <table class='table table-lg w-full'>
              <thead>
                <tr class='text-lg'>
                  <th>Name</th>
                  <th>Activity</th>
                  <th>Creation</th>
                  <th>Last Update</th>
                  <th>Due Date</th>
                  <th>Completion Date</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody>
                {goals.map((goal) => (
                  <tr>
                    <td>{goal.title}</td>
                    <td>
                      <div class='flex items-center gap-2'>
                        <Icon
                          name={activities.find((activity) => activity.id === goal.activityId)?.icon}
                          class='h-8 w-8 rounded-lg p-1'
                        />
                        <a href={`${baseHref}${activities.find((activity) => activity.id === goal.activityId)?.id}`}>
                          {activities.find((activity) => activity.id === goal.activityId)?.name}
                        </a>
                      </div>
                    </td>
                    <td>{formatDate(goal.creationDate, locale)}</td>
                    <td>{formatDate(goal.updateDate, locale)}</td>
                    <td>{goal.dueDate ? formatDate(goal.dueDate, locale) : '-'}</td>
                    <td>{goal.completionDate ? formatDate(goal.completionDate, locale) : '-'}</td>
                    <td>
                      <a href={`/goals/${goal.id}`}>
                        <svg
                          class='h-6 w-6 transition-all duration-300 hover:text-warning active:scale-105'
                          xmlns='http://www.w3.org/2000/svg'
                          viewBox='0 0 24 24'
                          fill='none'
                          stroke='currentColor'>
                          <path
                            stroke-linecap='round'
                            stroke-linejoin='round'
                            d='m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L6.832 19.82a4.5 4.5 0 0 1-1.897 1.13l-2.685.8.8-2.685a4.5 4.5 0 0 1 1.13-1.897L16.863 4.487Zm0 0L19.5 7.125'
                          />
                        </svg>
                      </a>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </article>
        <article class='flex grow flex-col gap-4 md:hidden'>
          <ul transition:name='content'>
            {goals.map((goal) => (
              <GoalRow goal={goal} />
            ))}
          </ul>
        </article>
      </>
    ) : (
      <div class='flex grow items-center justify-center py-8 text-lg'>No Goals</div>
    )
  }
  <footer class='flex justify-center gap-2'>
    <form method='get' class='flex items-center justify-center'>
      <input type='hidden' name='offset' value={offset >= itemsPerPage ? offset - itemsPerPage : itemsPerPage} />
      {paramsArray.map(([key, value]) => <input type='hidden' name={key} value={value} />)}
      <button
        disabled={offset === 0}
        type='submit'
        class={`${offset === 0 ? 'disabled cursor-not-allowed' : 'hover:scale-105 hover:font-semibold btn-neutral'} transition-transform btn `}>
        Previous Page
      </button>
    </form>
    <form method='get' class='flex items-center justify-center'>
      <input type='hidden' name='offset' value={offset ? offset + itemsPerPage : itemsPerPage} />
      {paramsArray.map(([key, value]) => <input type='hidden' name={key} value={value} />)}
      <button
        disabled={currentPage >= totalPages}
        type='submit'
        class={`${goals.length === 0 ? 'disabled cursor-not-allowed' : 'hover:scale-105 hover:font-semibold'} transition-transform btn btn-neutral`}>
        Next Page
      </button>
    </form>
  </footer>
</Card>
