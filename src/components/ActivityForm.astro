---
import TextInput from '@/components/TextInput.astro';
import type { ValidationErrors } from '@/types/formValidation.types';
import { getAllIconPaths } from '@/utils/getAllFilesName';
import InputContainer from '@components/InputContainer.astro';
import SubmitButton from '@components/SubmitButton.astro';
import type { TActivity } from 'db/config';

const icons = getAllIconPaths();
type Props = {
  title?: string;
  activity?: TActivity;
  validationErrors?: ValidationErrors;
};
const { activity, validationErrors, title } = Astro.props;
---

<section class='flex max-w-sm flex-col gap-8' transition:name='activity-form'>
  {title && <h1 class='text-4xl font-bold'>{title}</h1>}

  <form method='post'>
    <div class='flex flex-col gap-4 rounded border border-base-200 bg-base-200 p-4 shadow'>
      <div class='col-span-2 flex flex-col gap-4'>
        <InputContainer HTMLFor='name' label='Activity name' errors={validationErrors?.name}>
          <TextInput
            variant='300'
            value={activity?.name}
            id='create-activity'
            name='name'
            placeholder='insert name...'
          />
        </InputContainer>

        <InputContainer HTMLFor='select-icon-btn' label='' errors={validationErrors?.icon}>
          <div class='flex gap-2'>
            <button
              type='button'
              name='select-icon-btn'
              class='btn w-0 min-w-fit border border-white'
              onclick='icons_modal.showModal()'>
              Select icon
            </button>
            <img
              id='activity-icon-img'
              src={activity?.icon}
              alt='selected icon'
              class='h-12 w-12 rounded-lg bg-base-content p-1'
              class:list={[{ 'opacity-0': activity?.icon === undefined }]}
            />
          </div>
          <input id='activity-icon-input' type='hidden' name='icon' value={activity?.icon} />
        </InputContainer>

        <InputContainer HTMLFor='color' label='Select color' errors={validationErrors?.color}>
          <input
            id='color-picker'
            type='color'
            value={activity?.color}
            name='color'
            value='#ef4444'
            class:list={['box', 'bg-error', 'h-8', 'w-24']}
          />
        </InputContainer>

        <SubmitButton className='!btn-warning w-full disabled:!bg-warning'>
          {activity ? 'Update' : 'Create'}
        </SubmitButton>
      </div>
    </div>
  </form>
  <dialog id='icons_modal' class='modal'>
    <div class='modal-box flex flex-col gap-4'>
      <h3 class='text-lg font-bold'>Select an icon</h3>
      <div class='flex justify-center gap-8 rounded py-4'>
        {
          icons.map((path) => (
            <button class='icon-select-btn'>
              <img src={path} alt='icon' class='h-12 w-12 rounded-lg bg-base-content p-1' />
            </button>
          ))
        }
      </div>
      <div class='modal-action mt-0'>
        <form method='dialog'>
          <button class='btn'>Close</button>
        </form>
      </div>
    </div>
  </dialog>
  <style>
    #color-picker {
      -webkit-appearance: none;
      -moz-appearance: none;
      appearance: none;
      background-color: transparent;
      border: none;
      cursor: pointer;
    }
    #color-picker::-webkit-color-swatch {
      height: 100%;
      border-radius: 0.25rem;
      border: 1px solid white;
    }
    #color-picker::-moz-color-swatch {
      height: 100%;
      border: 1px solid white;
    }
  </style>
</section>
<script>
  const iconBtns = document.querySelectorAll<HTMLButtonElement>('.icon-select-btn');
  const iconInputSelection = document.querySelector<HTMLInputElement>('#activity-icon-input');
  const iconImgSelection = document.querySelector<HTMLImageElement>('#activity-icon-img');
  const dialog = document.querySelector<HTMLDialogElement>('#icons_modal');
  iconBtns.forEach((btn) => {
    btn.addEventListener('click', (e) => {
      const img = e.target as HTMLImageElement;
      if (iconInputSelection) iconInputSelection.value = img.src;
      if (iconImgSelection) {
        iconImgSelection.src = img.src;
        iconImgSelection.classList.remove('opacity-0');
      }
      dialog?.close();
    });
  });
</script>
