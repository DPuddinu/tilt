---
import { getCategories } from '@/api/categories/queries';
import { ITEMS_PER_PAGE, getCompletionRate, getPaginatedGoals } from '@/api/goals/queries';
import GoalFilterSidebar from '@/pages/goals/_components/GoalFilters.astro';
import CategoriesStore from '@/store/categories.store';
import FilterStore from '@/store/filters.store';
import GoalStore from '@/store/goals.store';
import type { GoalFilters, GoalFormParam } from '@/types/filters.types';
import Card from '@components/Card.astro';
import Fab from '@components/Fab.astro';
import GoalsList from '@components/GoalsList.astro';
import Layout from '@layouts/MainLayout.astro';
import type { TCategory, TGoal } from 'db/config';

const { user } = Astro.locals;

function getParam(param: string) {
  return Astro.url.searchParams.get(param);
}

function getGoalParam(param: GoalFormParam) {
  return getParam(param);
}

const goalFilters: GoalFilters = {
  completed: getGoalParam('completed') === 'on' || undefined,
  notCompleted: getGoalParam('notCompleted') === 'on' || undefined,
  expired: getGoalParam('expired') === 'on' || undefined,
  notExpired: getGoalParam('notExpired') === 'on' || undefined,
  fromDate: getGoalParam('fromDate') || undefined,
  toDate: getGoalParam('toDate') || undefined,
  category: Number(getGoalParam('category')) || undefined
};
const offsetFilter = Number(getParam('offset')) || 0;
const currentPage = offsetFilter / ITEMS_PER_PAGE + 1;
let totalRows = 0;
let goals: TGoal[] = [];
let totalPages = 0;
let categories: TCategory[] = [];
let completionRate: number;
let completedGoals: number;
let totalGoals: number;

FilterStore.checkFilterChange({ goalFilters, onChangedFilters: () => GoalStore.clear() });
FilterStore.setFilters(goalFilters);
FilterStore.setCurrentPage(currentPage);

try {
  const cachedGoalsCount = GoalStore.getGoalsCount();
  const cachedGoals = GoalStore.getGoalsByPage(currentPage);
  const cachedCategories = CategoriesStore.getAll();

  const { getGoals, countGoals } = getPaginatedGoals({
    userId: user.id,
    page: currentPage,
    filters: goalFilters
  });
  if (cachedGoals) {
    goals = cachedGoals;
    totalRows = cachedGoalsCount;
  } else {
    goals = await getGoals;
    totalRows = (await countGoals)?.count ?? 0;
    GoalStore.set(currentPage, ...goals);
    GoalStore.setGoalsCount(totalRows);
  }
  totalPages = Math.ceil(totalRows / ITEMS_PER_PAGE);

  if (cachedCategories) {
    categories = cachedCategories;
  } else {
    categories = await getCategories(user.id);
    CategoriesStore.set(categories);
  }

  const { ratePercentage, completedGoalsCount, totalGoalsCount } = await getCompletionRate(user.id);
  completionRate = ratePercentage;
  completedGoals = completedGoalsCount;
  totalGoals = totalGoalsCount;

} catch (error) {
  return Astro.redirect('goals/error');
}
---

<Layout pageName='Goals'>
  <section transition:animate='none' class='flex-container'>
    <div class='content flex flex-col gap-4 lg:flex-row'>
      <GoalFilterSidebar categories={categories} filters={goalFilters} />
      <div class="flex flex-col gap-4 md:flex-row grow">
        <GoalsList
          title='Goals'
          goals={goals}
          totalRows={totalRows}
          totalPages={totalPages}
          offset={offsetFilter}
          currentPage={currentPage}
          itemsPerPage={ITEMS_PER_PAGE}
        />
        <Card title='Goals completion' >
          <div class="flex flex-col gap-4">
            <h3>{`Completion percentage: ${completionRate}%`}</h3>
            <h3>{`Completed Goals: ${completedGoals}`}</h3>
            <h3>{`Total Goals: ${totalGoals}`}</h3>
          </div>
        </Card>
      </div>
    </div>
  </section>
  <Fab href='/goals/new'>+</Fab>
</Layout>
