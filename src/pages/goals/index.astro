---
import { getActivities } from '@/api/activities/queries';
import { ITEMS_PER_PAGE, getPaginatedGoals } from '@/api/goals/queries';
import { getSetupDone } from '@/api/setup/queries';
import GoalFilterSidebar from '@/pages/goals/_components/GoalFilters.astro';
import type { GoalFilters, GoalFormParam } from '@/types/filters.types';
import Fab from '@components/Fab.astro';
import GoalsList from '@components/GoalsList.astro';
import Layout from '@layouts/MainLayout.astro';
import type { TActivity, TGoal } from 'db/config';

const { user } = Astro.locals;

if (!(await getSetupDone(user.id))) return Astro.redirect('/setup');

function getParam(param: string) {
  return Astro.url.searchParams.get(param);
}

function getGoalParam(param: GoalFormParam) {
  return getParam(param);
}
const params = {
  completed: getGoalParam('completed'),
  notCompleted: getGoalParam('notCompleted'),
  expired: getGoalParam('expired'),
  notExpired: getGoalParam('notExpired'),
  fromDate: getGoalParam('fromDate'),
  toDate: getGoalParam('toDate'),
  activity: getGoalParam('activity')
};
const goalFilters: GoalFilters = {
  completed: params.completed === 'on' || undefined,
  notCompleted: params.notCompleted === 'on' || undefined,
  expired: params.expired === 'on' || undefined,
  notExpired: params.notExpired === 'on' || undefined,
  fromDate: params.fromDate || undefined,
  toDate: params.toDate || undefined,
  activity: Number(params.activity) || undefined
};
const offsetFilter = Number(getParam('offset')) || 0;
const currentPage = offsetFilter / ITEMS_PER_PAGE + 1;
let totalRows = 0;
let goals: TGoal[] = [];
let totalPages = 0;
let activities: TActivity[] = [];

try {
  const { countGoals, goals: getGoals } = await getPaginatedGoals({
    userId: user.id,
    page: currentPage,
    filters: goalFilters
  });
  goals = getGoals;
  totalPages = Math.ceil(countGoals / ITEMS_PER_PAGE);

  activities = await getActivities(user.id);
} catch (error) {
  return Astro.redirect('error?redirect=goals');
}
---

<Layout pageName='Goals'>
  <section class='flex flex-col gap-4 md:flex-row'>
    <GoalFilterSidebar activities={activities} filters={goalFilters} />
    <GoalsList
      queryParams={params}
      activities={activities}
      goals={goals}
      totalRows={totalRows}
      totalPages={totalPages}
      offset={offsetFilter}
      currentPage={currentPage}
      itemsPerPage={ITEMS_PER_PAGE}
    />
  </section>
  <Fab href='/goals/new'>+</Fab>
</Layout>
