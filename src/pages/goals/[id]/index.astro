---
import { getCategories } from '@/api/categories/queries';
import { updateGoal } from '@/api/goals/mutations';
import { getGoalById } from '@/api/goals/queries';
import GoalForm from '@/pages/goals/_components/GoalForm.astro';
import CategoriesStore from '@/store/categories.store';
import GoalStore from '@/store/goals.store';
import type { ValidationErrors } from '@/types/formValidation.types';
import { GoalInsertSchema } from '@/types/goal.types';
import Layout from '@layouts/MainLayout.astro';
import type { TCategory } from 'db/config';
import { ZodError } from 'zod';

const { id } = Astro.params;
const { user } = Astro.locals;

const cachedCategories = CategoriesStore.get();
let categories: TCategory[] = [];

if (cachedCategories) {
  categories = cachedCategories;
  console.log('CACHED CATEGORIES--->', categories);
} else {
  categories = await getCategories(user.id);
  CategoriesStore.set(categories);
  console.log('LOAD CATEGORIES--->', categories);
}

const [goal] = await getGoalById({
  id: Number(id),
  userId: user.id
});

let validationErrors: ValidationErrors | undefined;

if (Astro.request.method === 'POST') {
  GoalStore.clear();

  const formData = await Astro.request.formData();

  try {
    const data = GoalInsertSchema.parse(formData);
    await updateGoal({ ...data, userId: user.id, goalId: goal.id });

    return Astro.redirect('/goals');
  } catch (error) {
    if (error instanceof ZodError) {
      validationErrors = error.flatten().fieldErrors;
    }
    return Astro.redirect('/goals/' + goal.id + '/error');
  }
}
---

<Layout pageName='Goal'>
  <GoalForm validationErrors={validationErrors} goal={goal} title='Edit Goal' categories={categories} />
</Layout>
