---
import { getActivities } from '@/api/activities/queries';
import { updateGoal } from '@/api/goals/mutations';
import { getGoalById } from '@/api/goals/queries';
import GoalForm from '@/pages/goals/_components/GoalForm.astro';
import { getCachedGoalById, updateCachedGoal } from '@/store/goals.store';
import type { ValidationErrors } from '@/types/formValidation.types';
import { GoalInsertSchema } from '@/types/goal.types';
import Layout from '@layouts/MainLayout.astro';
import type { TActivity, TGoal } from 'db/config';
import { ZodError } from 'zod';

const { id } = Astro.params;
const { user } = Astro.locals;

const cachedGoal = getCachedGoalById(Number(id));

let activities: TActivity[] = [];
let goal: TGoal | undefined;

let validationErrors: ValidationErrors | undefined;

try {
  activities = await getActivities(user.id);
  goal = cachedGoal ? cachedGoal : await getGoalById({ id: Number(id), userId: user.id });
} catch (error) {
  if (error instanceof ZodError) {
    validationErrors = error.flatten().fieldErrors;
  } else return Astro.redirect(`/error?redirect=goals/${id}`);
}

if (Astro.request.method === 'POST') {
  if (!goal) throw new Error('Goal not found');
  const formData = await Astro.request.formData();

  try {
    const data = GoalInsertSchema.parse(formData);
    const updatedGoal = await updateGoal({ ...data, userId: user.id, goalId: goal.id });

    updateCachedGoal({ ...updatedGoal });
    return Astro.redirect('/goals');
  } catch (error) {
    if (error instanceof ZodError) {
      validationErrors = error.flatten().fieldErrors;
    } else return Astro.redirect(`/error?redirect=goals/${id}`);
  }
}
---

<Layout pageName='Goal'>
  <GoalForm validationErrors={validationErrors} goal={goal} title='Edit Goal' activities={activities} />
</Layout>
