---
import { getGoalsByTimePeriod } from '@/api/goals/queries';
const { user } = Astro.locals;

type ShortGoal = {
  completed: boolean;
  creationDate: Date;
};
let error: string | undefined;
const goalsByTimePeriod: ShortGoal[] = await getGoalsByTimePeriod({ userId: user.id, timeFilter: 'all Time' });
type CompletionGoal = {
  completedCount: number;
  notCompletedCount: number;
};
const goalsByMonth = goalsByTimePeriod.reduce(
  (acc, goal) => {
    const month = new Date(goal.creationDate).getMonth();

    if (goal.completed) {
      acc[month] = {
        completedCount: acc[month].completedCount + 1,
        notCompletedCount: acc[month].notCompletedCount
      };
    } else {
      acc[month] = {
        completedCount: acc[month].completedCount,
        notCompletedCount: acc[month].notCompletedCount + 1
      };
    }
    return acc;
  },
  new Array<CompletionGoal>(12).fill({
    completedCount: 0,
    notCompletedCount: 0
  })
);
---

<activities-bar-chart
  data-value={JSON.stringify(goalsByMonth)}
  class='col-span-1 flex w-full grow flex-col rounded-lg bg-base-300 px-8 py-4 md:col-span-2'>
  <h1 class='pb-4 text-center text-2xl font-bold text-base-content'>Goals per Month</h1>
  <h1>{error}</h1>
  <div class='flex grow flex-col items-end justify-end'>
    <canvas id='chart' class='min-h-[300px] md:h-auto'></canvas>
  </div>
</activities-bar-chart>

<script>
  import { BarController, BarElement, CategoryScale, Chart, Legend, LinearScale, Title, Tooltip } from 'chart.js';
  Chart.register(BarController, BarElement, LinearScale, Tooltip, CategoryScale, Title, Legend);

  class ActivitiesBarChart extends HTMLElement {
    constructor() {
      super();
      const data = this.dataset.value;
      const chart = document.querySelector<HTMLCanvasElement>('#chart');
      const darkModePreference = window.matchMedia('(prefers-color-scheme: dark)');

      let labelColor = 'lightgray';

      if (data && chart) {
        const parsedData = JSON.parse(data) as {
          completedCount: number;
          notCompletedCount: number;
        }[];
        const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        const barchart = new Chart(chart, {
          type: 'bar',
          options: {
            maintainAspectRatio: false,
            plugins: {
              legend: {
                labels: {
                  boxHeight: 15,
                  color: labelColor,
                  font: {
                    size: 16
                  }
                },
                position: 'top'
              }
            },
            scales: {
              x: {
                stacked: true,
                labels: months.map((row) => row),
                type: 'category',
                ticks: {
                  color: labelColor,
                  font: {
                    size: 16
                  }
                }
              },
              y: {
                stacked: true,
                ticks: {
                  color: labelColor,
                  stepSize: 1,
                  font: {
                    size: 16
                  }
                },
                type: 'linear'
              }
            }
          },
          data: {
            datasets: [
              {
                label: 'Completed',
                data: parsedData.map((row) => row.completedCount),
                backgroundColor: '#64d175',
                barThickness: 30
              },
              {
                label: 'Not Completed',
                data: parsedData.map((row) => row.notCompletedCount),
                backgroundColor: '#ef4444',
                barThickness: 30
              }
            ]
          }
        });
        darkModePreference.addEventListener('change', (e) => {
          labelColor = e.matches ? 'lightgray' : 'black';
          const xLabelColor = barchart.options.scales?.x?.ticks;
          const yLabelColor = barchart.options.scales?.y?.ticks;
          if (xLabelColor && yLabelColor) {
            xLabelColor.color = labelColor;
            yLabelColor.color = labelColor;
            barchart.update();
          }
        });
      }
    }
  }

  customElements.define('activities-bar-chart', ActivitiesBarChart);
</script>
