---
import { createActivity } from '@/api/activities/mutations';
import { createGoal } from '@/api/goals/mutations';
import { setSetupDone } from '@/api/setup/mutations';
import { getSetupDone } from '@/api/setup/queries';
import ActivityForm from '@/components/ActivityForm.astro';
import GoalForm from '@/pages/goals/_components/GoalForm.astro';
import store from '@/store/first-setup.store';
import { ActivitySchema } from '@/types/activities.types';
import type { ValidationErrors } from '@/types/formValidation.types';
import { GoalInsertSchema } from '@/types/goal.types';
import Layout from '@layouts/MainLayout.astro';
import SetupLayout from '@layouts/SetupLayout.astro';
import type { TActivity } from 'db/config';
import { ZodError, z } from 'zod';
import { zfd } from 'zod-form-data';

const { user } = Astro.locals;
if (await getSetupDone(user.id)) return Astro.redirect('/goals');
const step = Astro.url.searchParams.get('step');
if (!step) return Astro.redirect('/setup?step=1');

let validationErrors: ValidationErrors | undefined;

let activities: TActivity[] = [];


try {
  const step1 = store.getStep1();
  if (step1) {
    activities = [
      {
        id: -1,
        name: store.getStep1()!.createActivityPayload.name,
        authorId: user.id,
        color: store.getStep1()!.createActivityPayload.color,
        icon: store.getStep1()!.createActivityPayload.icon
      }
    ];
  }
  if (step === '2' && !store.getStep1()) return Astro.redirect('/setup?step=1');
} catch (error) {
  return Astro.redirect('/error?redirect=setup');
}

if (Astro.request.method === 'POST') {
  const formData = await Astro.request.formData();
  if (step === '1') {
    try {
      const validated = ActivitySchema.parse(formData);

      store.setStep1({
        authorId: user.id,
        ...validated,
      });

      return Astro.redirect('/setup?step=2');
    } catch (error) {
      if (error instanceof ZodError) {
        validationErrors = error.flatten().fieldErrors;
      }
    }
  }
  if (step === '2') {
    try {
      const data = GoalInsertSchema.parse(formData);
      store.setStep2({
        ...data,
        authorId: user.id,
        authorName: user.name
      });
      if (store.stepsCompleted()) {
        const activity = await createActivity({
          authorId: user.id,
          name: store.getStep1()!.createActivityPayload.name,
          color: store.getStep1()!.createActivityPayload.color,
          icon: store.getStep1()!.createActivityPayload.icon
        });
        await createGoal({
          ...store.getStep2()!.goalInsertPayload,
          activityId: activity.id,
          authorId: user.id,
          authorName: user.name
        });
        await setSetupDone(user.id);
        return Astro.redirect('/goals');
      }
    } catch (error) {
      if (error instanceof ZodError) {
        validationErrors = error.flatten().fieldErrors;
      } else return Astro.redirect('/error?redirect=setup');
    }
  }
}
---

<Layout>
  <SetupLayout>
    {step === '1' && <ActivityForm validationErrors={validationErrors} />}
    {step === '2' && <GoalForm activities={activities} validationErrors={validationErrors} />}
  </SetupLayout>
</Layout>
