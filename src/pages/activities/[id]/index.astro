---
import { updateActivity } from '@/api/activities/mutations';
import { getActivityById } from '@/api/activities/queries';
import { ITEMS_PER_PAGE, getGoalByActivityId } from '@/api/goals/queries';
import { ActivitySchema } from '@/types/activities.types';
import type { ValidationErrors } from '@/types/formValidation.types';
import GoalsList from '@components/GoalsList.astro';
import Layout from '@layouts/MainLayout.astro';
import type { TActivity, TGoal } from 'db/config';
import { ZodError } from 'zod';
import ActivityForm from '../_components/ActivityForm.astro';

const { id } = Astro.params;
const { user } = Astro.locals;

function getParam(param: string) {
  return Astro.url.searchParams.get(param);
}
const offsetFilter = Number(getParam('offset')) || 0;
const currentPage = offsetFilter / ITEMS_PER_PAGE + 1;

const { getGoalsByActivity, getActivitiesCount } = getGoalByActivityId({
  activityId: Number(id),
  userId: user.id,
  page: currentPage
});

let goals: TGoal[] = [];
let totalPages = 0;
let totalRows = 0;

let validationErrors: ValidationErrors | undefined;
let activity: TActivity | undefined;

try {
  const calls = await Promise.all([
    getActivityById({
      id: Number(id),
      userId: user.id
    }),
    getGoalsByActivity,
    getActivitiesCount
  ]);

  activity = calls[0];
  goals = calls[1];
  totalRows = calls[2]?.count ?? 0;
  totalPages = Math.ceil(totalRows / ITEMS_PER_PAGE);
} catch (error) {
  return Astro.redirect(`/error?redirect=activities/${activity.id}`);
}

if (Astro.request.method === 'POST') {
  const formData = await Astro.request.formData();

  try {
    if (!activity) throw new Error('Activity not found');
    const data = ActivitySchema.parse(formData);
    await updateActivity({ ...activity, ...data });

    return Astro.redirect(`/activities/${activity.id}`);
  } catch (error) {
    if (error instanceof ZodError) {
      validationErrors = error.flatten().fieldErrors;
    } else return Astro.redirect(`/error?redirect=activities/${activity.id}`);
  }
}
---

<Layout pageName='Activity'>
  <div class='pb-8'>
    <ActivityForm validationErrors={validationErrors} activity={activity} title='Edit Activity' />
  </div>
  <div class='flex-container max-w-xl'>
    <GoalsList
      queryParams={undefined}
      title={`${activity?.name} Goals`}
      goals={goals}
      totalRows={totalRows}
      totalPages={totalPages}
      offset={offsetFilter}
      currentPage={currentPage}
      itemsPerPage={ITEMS_PER_PAGE}
    />
  </div>
</Layout>
